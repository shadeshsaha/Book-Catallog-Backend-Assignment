// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  role             String            @default("customer")
  contactNo        String
  address          String
  profileImg       String
  reviewAndRatings ReviewAndRating[]
  orders           Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id    String @id @default(uuid())
  title String
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  categoryId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category         Category          @relation(fields: [categoryId], references: [id])
  reviewAndRatings ReviewAndRating[]
  orderedBooks     OrderedBook[]

  @@map("books")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("reviews-and-ratings")
}

model Order {
  id           String        @id @default(uuid())
  userId       String
  status       String        @default("pending")
  orderedBooks OrderedBook[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderedBook {
  id        String   @id @default(uuid())
  orderId   String
  bookId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
  book  Book  @relation(fields: [bookId], references: [id])

  @@map("ordered-books")
}
